load "genfree-codebase-part1.magma";

print "Calculating with PGL_4 in support of Garibaldi-Guralnick II, Example 10.4";

// At the end, we explicitly construct the Lie algebra pgl_4 over a field of char 2
// inside of gl_24.  It is the image of pgl_4 under the representation with highest 
// weight 012, i.e., it is a tensor product 
//    (wedge^2 natural) (tensor) (Frobenius twist of natural)
//
// Along the way, we build smaller representations that we later leverage in the 
// construction of pgl_4 in gl_24.

//R := RationalField();       // included in case you want to compare results
R := GF(2^4);    // the field we work over for Garibaldi-Guralnick

//--------------------------------------------------------------
// we demonstrate that we can construct sl4 over a field of characteristic 2

zmat := ZeroMatrix(R, 4, 4);  // 4x4 zero matrix

// generators of root subalgebras for the simple roots
x1 := zmat;
x1[1,2] := 1;

x2 := zmat;
x2[2,3] := 1;

x3 := zmat;
x3[3,4] := 1;

xs := [x1, x2, x3];  
ys := [Transpose(x) : x in xs];  // generators for the negative simple roots

gl4 := MatrixLieAlgebra(R, 4);
sl4 := sub<gl4 | xs cat ys>; // sl_4 should be generated by the simple roots

assert Dimension(sl4) eq 15; // did we get all of sl_4 ?

if Characteristic(R) eq 2 then
	zsl4 := Center(sl4);
	assert Dimension(zsl4) eq 1;
	assert IsSimple(sl4 / zsl4);
else
	assert IsSimple(sl4);
	assert SemisimpleType(sl4) eq "A3";
end if;

//--------------------------------------------------------------
// now we explicitly construct the image of sl_4 in gl_6
// under wedge^2 of the natural representation

zmat6 := ZeroMatrix(R, 6, 6);  // the 6x6 zero matrix

// generators of root subalgebras for the simple roots
x16 := zmat6;
x16[2,4] := 1;
x16[3,5] := 1;

x26 := zmat6;
x26[1,2] := 1;
x26[5,6] := 1;

x36 := zmat6;
x36[2,3] := 1;
x36[4,5] := 1;

x6s := [x16, x26, x36]; 
y6s := [Transpose(x) :  x in x6s]; // generators for the negative simple roots

gl6 := MatrixLieAlgebra(R, 6);
sl46 := sub<gl6 | x6s cat y6s>;

assert IsSimple(sl46);

if Characteristic(R) eq 2 then
	assert Dimension(sl46) eq 14;
else
	assert Dimension(sl46) eq 15;
	assert SemisimpleType(sl46) eq "A3";
end if;

//--------------------------------------------------------------
// now we explicitly construct the image of sl_4 in gl_24
// under wedge^2 of the natural representation (tensor) Frobenius twist of natural

zmat24 := ZeroMatrix(R, 24, 24); // zero matrix

x24s := [DiagonalJoin([x,x,x,x]) : x in x6s]; // simple roots like on 4 copies of wedge^2
y24s := [Transpose(x) : x in x24s];

gl24 := MatrixLieAlgebra(R, 24);
sl424 := sub<gl24 | x24s cat y24s>; // generate the image of sl_4 in gl_24

assert IsSimple(sl424); 

if Characteristic(R) eq 2 then
	assert Dimension(sl424) eq 14;
else
	assert Dimension(sl424) eq 15;
	assert SemisimpleType(sl424) eq "A3";
end if;

// but the image of sl_4 in gl_24 is a codimension 1 subspace of pgl_4
// add a new semisimple element 
hsub := DiagonalMatrix([0,0,0,-1,-1,-1]);
h := DiagonalJoin([DiagonalMatrix([2,2,2,1,1,1]), hsub, hsub, hsub]);

pgl4, rho := sub<gl24 | x24s cat y24s cat [h]>;  // image of pgl_4 in gl_24, with embedding

assert Dimension(pgl4) eq 15;

if Characteristic(R) ne 2 then
	assert IsSimple(pgl4);
	assert pgl4 eq sl424;
end if;

//-------------------------------------------------------------
// We could have generated pgl4 with h_{omega_3} instead

hpsub := DiagonalMatrix([1,1,0,1,0,0]);
hp := DiagonalJoin([DiagonalMatrix([-1,-1,-2,-1,-2,-2]), hpsub, hpsub, hpsub]);
assert gl24!hp in pgl4;  // we ended up in pgl4 again
if Characteristic(R) eq 2 then
	assert not(gl24!hp in sl424); // and not in the image of sl4
end if;

//-------------------------------------------------------------
// But h_{omega_2} in gl_24 lives in the image of sl_4

hqsub := DiagonalMatrix([0,1,1,1,1,0]);
hq := DiagonalJoin([hqsub, hqsub, -hqsub, -hqsub]);
assert gl24!hq in sl424; // we are still in the image of sl_4 in gl_24

//-------------------------------------------------------------
// Finally we compute the generic stabilizer in pgl_4
// for this 24-dimensional representation


// We compute a putative stabilizer in pgl_4 of a generic vector in the 24-dimensional
// representation using a function from
// genfree-codebase-part1.magma
stabdim := genStabDim(pgl4, rho, BaseModule(gl24)); // compute the putative generic stabilizer

if stabdim eq 0 then
	print "Found a vector in the 24-dimensional representation whose stabilizer in pgl_4 is trivial.";
	print "Therefore the action of pgl_4 is generically free.";
else
	printf "Oops!  Among the vectors we inspected, the smallest stabilizer in pgl_4 that we found had dimension %o\n", stabdim;
end if;




